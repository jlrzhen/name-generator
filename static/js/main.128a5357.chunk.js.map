{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","input","setInput","className","style","color","href","onChange","event","target","value","onClick","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","DONE","findName","response","open","url","send","res","Math","floor","random","word","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA0CeA,MAvCf,WACE,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAoBA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,mBAAGC,MAAO,CAACC,MAAO,SAAUC,KAAK,4CAAjC,+BACA,gDACA,6CACA,uBAAOC,SAAU,SAAAC,GAAK,OAAIN,EAASM,EAAMC,OAAOC,UAC9CX,EACA,qCACF,0CAAaA,KACb,wBAAQY,QAAS,WAAOX,EAAQ,MAAOE,EAAS,OAAhD,yBAHS,wBAAQS,QAzBH,WAClB,IAAMC,EAAM,IAAIC,eAGhBD,EAAIE,aAAe,OACnBF,EAAIG,mBAAqB,WACnBH,EAAII,aAAeH,eAAeI,MACpCC,EAASN,EAAIO,WAGjBP,EAAIQ,KAAK,MAAOC,0CAAepB,GAC/BW,EAAIU,OAEJ,IAAMJ,EAAW,SAACK,GAChBvB,EAAQuB,EAAIC,KAAKC,MAAoB,EAAdD,KAAKE,WAAaC,QAW9B,iCCpBFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.128a5357.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [name, setName] = useState(null);\n  const [input, setInput] = useState(null);\n\n  const handleClick = () => {\n    const xhr = new XMLHttpRequest();\n    const url = \"https://api.datamuse.com/words?\";\n    const params = \"rel_gen=\";\n    xhr.responseType = 'json';\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        findName(xhr.response);\n      }\n    }\n    xhr.open('GET', url + params + input);\n    xhr.send();\n\n    const findName = (res) => {\n      setName(res[Math.floor(Math.random()*3)].word);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a style={{color: \"white\"}} href=\"https://github.com/jlrzhen/name-generator\">GitHub repository</a>\n        <h1>Name Generator</h1>\n        <p>Input Theme:</p>\n        <input onChange={event => setInput(event.target.value)} />\n        {!name ? <button onClick={handleClick}>Generate Name</button>\n        : <>\n        <h2>Result: {name}</h2>\n        <button onClick={() => {setName(null); setInput(null);}}>New Name</button>\n        </>}            \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}