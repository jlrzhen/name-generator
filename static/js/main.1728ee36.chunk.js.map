{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","input","setInput","className","style","color","href","id","value","disabled","onChange","event","target","onClick","document","getElementById","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","DONE","findName","response","open","url","send","res","newNames","i","length","push","word","newNamesString","Math","floor","random","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oNA6FeA,MA1Ff,WACE,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KA8DA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,mBAAGC,MAAO,CAACC,MAAO,SAAUC,KAAK,4CAAjC,+BACA,gDACA,+CAEA,yBAAQC,GAAG,MAAX,UACE,wBAAQC,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,8BAGF,6CACA,uBAAOD,GAAG,aAAaE,SAAUV,EAAMW,SAAU,SAAAC,GAAK,OAAIT,EAASS,EAAMC,OAAOJ,UAG9ET,EACA,qCACF,0CAAaA,KACb,wBAAQc,QAzBM,WAClBb,EAAQ,MACRE,EAAS,MACTY,SAASC,eAAe,cAAcP,MAAQ,MAsB1C,yBAHS,wBAAQK,QA5EH,WAElB,GAAIZ,EAEG,CAGL,IAAMe,EAAM,IAAIC,eAGhBD,EAAIE,aAAe,OACnBF,EAAIG,mBAAqB,WACnBH,EAAII,aAAeH,eAAeI,MACpCC,EAASN,EAAIO,WAGjBP,EAAIQ,KAAK,MAAOC,0CAAexB,GAC/Be,EAAIU,OAGJ,IAAMJ,EAAW,SAACK,GAChB,IAGE,IADA,IAAIC,EAAW,GACNC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC1BA,EAAI,IACND,EAASG,KAAKJ,EAAIE,GAAGG,MAMzB,IADA,IAAIC,EAAiB,GACZJ,EAAI,EAAGA,EAAID,EAASE,OAAQD,IACnCI,GAAkBL,EAASC,GAEiB,SAAzCf,SAASC,eAAe,OAAOP,QAChCyB,GAAkB,KAAO,IAAKC,KAAKC,MAAoB,IAAdD,KAAKE,YAG7CP,EAAID,EAASE,OAAS,IACvBG,GAAkB,MAGtBjC,EAAQiC,GAER,MAAMI,GAENrC,EAAQ,wBA5CZA,EAAQ,kBAyEG,iCCvEFsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASC,eAAe,SAM1BuB,K","file":"static/js/main.1728ee36.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [name, setName] = useState(null);\n  const [input, setInput] = useState(null);\n\n  const handleClick = () => {\n    \n    if(!input) {\n      setName(\"invalid input\");\n    } else {\n\n      /* GET Request for DataMuse  */\n      const xhr = new XMLHttpRequest();\n      const url = \"https://api.datamuse.com/words?\";\n      const params = \"rel_gen=\";\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          findName(xhr.response);\n        }\n      }\n      xhr.open('GET', url + params + input);\n      xhr.send();\n\n      /* Displays list of names from DataMuse response */ \n      const findName = (res) => {\n        try {\n          /* Convert response to array of names */\n          let newNames = [];\n          for (let i = 0; i < res.length; i++) {\n            if (i < 10) {\n              newNames.push(res[i].word);\n            }\n          }\n                 \n          /* Convert array of names to string */\n          let newNamesString = \"\";\n          for (let i = 0; i < newNames.length; i++) {\n            newNamesString += newNames[i];\n            \n            if(document.getElementById(\"sel\").value === \"rand\") {\n              newNamesString += \" \" + (1000+Math.floor(Math.random()*9000));\n            }\n            \n            if(i < newNames.length - 1) {\n              newNamesString += \", \";\n            }\n          }\n          setName(newNamesString);\n               \n        } catch(error) {\n          //console.log(error.message)\n          setName(\"invalid theme\");\n        }\n      }\n\n    }\n  }\n\n  const handleReset = () => {\n    setName(null); \n    setInput(null);\n    document.getElementById(\"themeInput\").value = null;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a style={{color: \"white\"}} href=\"https://github.com/jlrzhen/name-generator\">GitHub repository</a>\n        <h1>Name Generator</h1>\n        <p>Input options:</p>\n       \n        <select id=\"sel\">\n          <option value=\"none\">None</option>\n          <option value=\"rand\">Random Number</option>\n        </select>\n\n        <p>Input Theme:</p>\n        <input id=\"themeInput\" disabled={name} onChange={event => setInput(event.target.value)} />\n        \n        {/* Show name and reset button after generating name */}\n        {!name ? <button onClick={handleClick}>Generate Name</button>\n        : <>\n        <h2>Result: {name}</h2>\n        <button onClick={handleReset}>New Name</button>\n        </>}            \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}