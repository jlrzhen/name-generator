{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","input","setInput","handleClick","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","DONE","findName","response","open","url","send","res","newNames","selectedIndexes","length","randNum","Math","floor","random","includes","push","word","newNamesString","i","document","getElementById","checked","split","join","error","console","log","message","className","style","color","href","id","fontWeight","for","type","value","disabled","onChange","event","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oNAsIeA,MAnIf,WACE,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAc,WAIlB,GAFAH,EAAQ,MAEJC,EAEG,CAGL,IAAMG,EAAM,IAAIC,eAGhBD,EAAIE,aAAe,OACnBF,EAAIG,mBAAqB,WACnBH,EAAII,aAAeH,eAAeI,MACpCC,EAASN,EAAIO,WAGjBP,EAAIQ,KAAK,MAAOC,0CAAeZ,GAC/BG,EAAIU,OAGJ,IAAMJ,EAAW,SAACK,GAChB,IAaE,IAVA,IAAIC,EAAW,GACXC,EAAkB,GAUtBA,EAAgBC,OAAS,IACzBD,EAAgBC,OAASH,EAAIG,QAAQ,CAEnC,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAASP,EAAIG,SAEvCD,EAAgBM,SAASJ,IAAYA,EAV5B,KAWXF,EAAgBO,KAAKL,GACrBH,EAASQ,KAAKT,EAAII,GAASM,OAa/B,IADA,IAAIC,EAAiB,GACZC,EAAI,EAAGA,EAAIX,EAASE,OAAQS,IAEhCC,SAASC,eAAe,WAAWC,QACpCJ,GAAkBV,EAASW,GAAGI,MAAM,KAAKC,KAAK,IAE9CN,GAAkBV,EAASW,GAI1BC,SAASC,eAAe,QAAQC,UACjCJ,GAAkB,KAAO,IAAKN,KAAKC,MAAoB,IAAdD,KAAKE,YAG7CK,EAAIX,EAASE,OAAS,IACvBQ,GAAkB,MAGtB1B,EAAQ0B,GAGLV,EAAW,GACZhB,EAAQ,iBAEV,MAAMiC,GACNC,QAAQC,IAAIF,EAAMG,gBA5EtBpC,EAAQ,kBAyFZ,OACE,qBAAKqC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,mBAAGC,MAAO,CAACC,MAAO,SAAUC,KAAK,gCAAjC,0BACA,uBACA,mBAAGF,MAAO,CAACC,MAAO,SAAUC,KAAK,4CAAjC,+BACA,gDAEA,0BAASC,GAAG,YAAZ,UACE,uBAAOH,MAAO,CAACI,WAAY,QAA3B,4BACA,uBACA,uBAAOC,IAAI,OAAX,4BACA,uBAAOC,KAAK,WAAWH,GAAG,OAAOI,MAAM,SACvC,uBACA,uBAAOF,IAAI,UAAX,wBACA,uBAAOC,KAAK,WAAWH,GAAG,UAAUI,MAAM,eAG5C,6CACA,uBAAOJ,GAAG,aAAaK,SAAU/C,EAAMgD,SAAU,SAAAC,GAAK,OAAI9C,EAAS8C,EAAMC,OAAOJ,UAG9E9C,EACA,qCACF,0CAAaA,KACb,wBAAQmD,QAAS/C,EAAjB,qBACA,wBAAQ+C,QAhCM,WAClBlD,EAAQ,MACRE,EAAS,MACT0B,SAASC,eAAe,cAAcgB,MAAQ,MA6B1C,yBAJS,wBAAQK,QAAS/C,EAAjB,iCC/GFgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASC,eAAe,SAM1BsB,K","file":"static/js/main.99744aa1.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [name, setName] = useState(null);\n  const [input, setInput] = useState(null);\n\n  const handleClick = () => {\n    \n    setName(null); \n    \n    if(!input) {\n      setName(\"invalid input\");\n    } else {\n\n      /* GET Request for DataMuse  */\n      const xhr = new XMLHttpRequest();\n      const url = \"https://api.datamuse.com/words?\";\n      const params = \"rel_gen=\";\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          findName(xhr.response);\n        }\n      }\n      xhr.open('GET', url + params + input);\n      xhr.send();\n\n      /* Displays list of names from DataMuse response */ \n      const findName = (res) => {\n        try {\n          \n          /* Convert response to array of names */\n          let newNames = [];\n          let selectedIndexes = [];\n          \n          /* Maximum index of DataMuse response ranked by\n          score, higher values are generally less accurate \n          but provide more options */\n          let maxIndex = 30;\n\n          /* Generate array of random numbers within index range of \n          API query repsonse */ \n          while(\n          selectedIndexes.length < 10 && \n          selectedIndexes.length < res.length) {          \n            \n            let randNum = Math.floor(Math.random()*res.length); \n            \n            if(!selectedIndexes.includes(randNum) && randNum < maxIndex) {           \n              selectedIndexes.push(randNum);\n              newNames.push(res[randNum].word);\n            }\n          }\n\n          /* \n          TODO: \n          - Work on CSS\n          - Capitalize first letter of each word (add as option)\n          - Change metadata\n          */\n\n          /* Convert array of names to string */\n          let newNamesString = \"\";\n          for (let i = 0; i < newNames.length; i++) {\n            // Remove spaces between words in name\n            if(document.getElementById(\"noSpace\").checked) {\n              newNamesString += newNames[i].split(\" \").join(\"\");\n            } else {\n              newNamesString += newNames[i];\n            }\n            \n            // Append random four digit number to name\n            if(document.getElementById(\"rand\").checked) {\n              newNamesString += \" \" + (1000+Math.floor(Math.random()*9000));\n            }\n            \n            if(i < newNames.length - 1) {\n              newNamesString += \", \";\n            }\n          }\n          setName(newNamesString);\n\n          /* Response for invalid theme response from API */\n          if(newNames < 1) {\n            setName(\"invalid theme\");\n          }\n        } catch(error) {\n          console.log(error.message)\n        }\n      }\n\n    }\n  }\n\n  const handleReset = () => {\n    setName(null); \n    setInput(null);\n    document.getElementById(\"themeInput\").value = null;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a style={{color: \"white\"}} href=\"https://www.datamuse.com/api/\">Datamuse API</a>\n        <br/>\n        <a style={{color: \"white\"}} href=\"https://github.com/jlrzhen/name-generator\">GitHub repository</a>\n        <h1>Name Generator</h1>\n        \n        <section id=\"selection\">\n          <label style={{fontWeight: \"bold\"}}>Input options:</label>\n          <br/>\n          <label for=\"rand\">Random Number </label>\n          <input type=\"checkbox\" id=\"rand\" value=\"rand\"/>\n          <br/>\n          <label for=\"noSpace\">No Spaces </label>\n          <input type=\"checkbox\" id=\"noSpace\" value=\"noSpace\"/>\n        </section>\n\n        <p>Input Theme:</p>\n        <input id=\"themeInput\" disabled={name} onChange={event => setInput(event.target.value)} />\n        \n        {/* Show name and reset button after generating name */}\n        {!name ? <button onClick={handleClick}>Generate Name</button>\n        : <>\n        <h3>Result: {name}</h3>\n        <button onClick={handleClick}>Refresh</button>\n        <button onClick={handleReset}>New Name</button>\n        </>}            \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}