{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","input","setInput","randEnabled","setRandEnabled","lightMode","setLightMode","handleClick","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","DONE","findName","response","open","url","send","res","newNames","selectedIndexes","length","randNum","Math","floor","random","includes","push","word","newNamesString","i","document","getElementById","value","capsArr","split","forEach","index","toUpperCase","slice","join","console","log","checked","error","message","className","href","onClick","id","style","fontWeight","for","type","onChange","disabled","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f654acbf.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [name, setName] = useState(null);\n  const [input, setInput] = useState(null);\n  const [randEnabled, setRandEnabled] = useState(false);\n  const [lightMode, setLightMode] = useState(true);\n\n  const handleClick = () => {\n    \n    setName(null); \n    \n    if(!input) {\n      setName(\"invalid input\");\n    } else {\n\n      /* GET Request for DataMuse  */\n      const xhr = new XMLHttpRequest();\n      const url = \"https://api.datamuse.com/words?\";\n      const params = \"rel_gen=\";\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          findName(xhr.response);\n        }\n      }\n      xhr.open('GET', url + params + input);\n      xhr.send();\n\n      /* Displays list of names from DataMuse response */ \n      const findName = (res) => {\n        try {\n          \n          /* Convert response to array of names */\n          let newNames = [];\n          let selectedIndexes = [];\n          \n          /* Maximum index of DataMuse response ranked by\n          score, higher values are generally less accurate \n          but provide more options */\n          let maxIndex = 30;\n\n          /* Generate array of random numbers within index range of \n          API query repsonse */ \n          while(\n          selectedIndexes.length < 10 && \n          selectedIndexes.length < res.length) {          \n            \n            let randNum = Math.floor(Math.random()*res.length); \n            \n            if(!selectedIndexes.includes(randNum) && randNum < maxIndex) {           \n              selectedIndexes.push(randNum);\n              newNames.push(res[randNum].word);\n            }\n          }\n\n          /* TODO: \n            - Work on CSS, add animations\n            - Add links to copy to clipboard\n              after clicking name\n            - Clean files\n            -separate code into smaller files\n          */\n\n          /* Convert array of names to string */\n          let newNamesString = \"\";\n          for (let i = 0; i < newNames.length; i++) {\n            // Capitalize first letter of each word\n            if(document.getElementById(\"caps\").value===\"allCaps\") {\n              let capsArr = newNames[i].split(\" \");\n              capsArr.forEach(\n                (name, index) => capsArr[index] = name[0].toUpperCase() + name.slice(1)\n              );\n              newNames[i] = capsArr.join(\" \");\n              console.log(capsArr);\n            }\n\n            // Capitalize with camelCase \n            if(document.getElementById(\"caps\").value===\"camelCase\") {\n              let capsArr = newNames[i].split(\" \");\n              capsArr.forEach(\n                (name, index) => {\n                  if(index>0) {capsArr[index] = name[0].toUpperCase() + name.slice(1)}\n                }\n              );\n              newNames[i] = capsArr.join(\" \");\n              console.log(capsArr);\n            }\n\n            // Remove spaces between words in name\n            if(document.getElementById(\"noSpace\").checked) {\n              newNamesString += newNames[i].split(\" \").join(\"\");\n            } else {\n              newNamesString += newNames[i];\n            }\n            \n            // Append random four digit number to name\n            if(document.getElementById(\"rand\").checked) {\n              // Remove space between name and numbers\n              if(document.getElementById(\"noSpaceNum\").checked) {\n                newNamesString += \"\" + (1000+Math.floor(Math.random()*9000));\n              } else {\n                newNamesString += \" \" + (1000+Math.floor(Math.random()*9000));\n              }\n            }\n            \n            if(i < newNames.length - 1) {\n              newNamesString += \", \";\n            }\n          }\n          setName(newNamesString);\n\n          /* Response for invalid theme response from API */\n          if(newNames < 1) {\n            setName(\"invalid theme\");\n          }\n        } catch(error) {\n          console.log(error.message)\n        }\n      }\n\n    }\n  }\n\n  const handleReset = () => {\n    setName(null); \n    setInput(null);\n    document.getElementById(\"themeInput\").value = null;\n  }\n\n  const handleThemeChange = () => {\n    lightMode ? setLightMode(false) : setLightMode(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className={lightMode?\"App-headerDark\":\"App-headerLight\"}>\n        <a className={lightMode?\"white\":\"black\"} href=\"https://www.datamuse.com/api/\">Datamuse API</a>\n        <br/>\n        <a className={lightMode?\"white\":\"black\"} href=\"https://github.com/jlrzhen/name-generator\">GitHub repository</a>\n        <h1>Name Generator</h1>\n        \n        <div>\n          <label>Change Theme </label>\n          <button\n            onClick = {handleThemeChange}\n          >{lightMode?\"Light Mode\":\"Dark Mode\"}</button>\n          {/* <p>Dark mode: {lightMode.toString()}</p> */}\n        </div>\n        <br/>\n        \n        <section id=\"selection\">\n          <label style={{fontWeight: \"bold\"}}>Input options:</label>\n          <br/>\n          <label for=\"rand\">Random Number </label>\n          <input type=\"checkbox\" id=\"rand\" value=\"rand\"\n            onChange = {() => setRandEnabled(document.getElementById(\"rand\").checked)}\n          />\n          <br/>\n          {randEnabled ?\n            <>\n              <label for=\"noSpaceNum\">No Space Before Number </label>\n              <input type=\"checkbox\" id=\"noSpaceNum\" value=\"noSpaceNum\"/>\n              <br/> \n            </> : <></>\n          }\n          <label for=\"noSpace\">No Spaces Between Words </label>\n          <input type=\"checkbox\" id=\"noSpace\" value=\"noSpace\"/>\n          <br/>\n          <label for=\"caps\">Capitalization </label>\n          <select id=\"caps\">\n            <option value=\"allCaps\">Capitalize First Letters</option>\n            <option value=\"camelCase\">camelCase</option>\n            <option value=\"none\">none</option>\n          </select>\n        </section>\n\n        <div><br/>\n          <label style={{fontWeight: \"bold\"}}>Input Keyword: </label>\n          <input id=\"themeInput\" disabled={name} onChange={event => setInput(event.target.value)} />\n        </div><br/>\n        \n        {/* Show name and reset button after generating name */}\n        {!name ? <button onClick={handleClick}>Generate Name</button>\n        : <>\n        <h3>Result: {name}</h3>\n        <button onClick={handleClick}>Refresh</button>\n        <button onClick={handleReset}>New Name</button>\n        </>}            \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}